@page "/portal-docente"
@attribute [Authorize(Roles = "Docente")]

@using Application.Interfaces.ApiClients
@using Application.Interfaces.Repositories
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util

@inject IAPIDocenteCursoClient DocenteCursoClient
@inject IAPICursoClient CursoClient
@inject IAPIMateriaClient MateriaClient
@inject IAPIComisionClient ComisionClient
@inject IAlumnoInscripcionClients InscripcionClient
@inject IAPIUsuarioClients UsuarioClient
@inject IAPIReportesClient ReportesClient
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Portal del Docente</PageTitle>

<div class="container-fluid mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-dark text-white">
            <h4 class="mb-0">@(_docenteActual?.PersonaNombreCompleto) <small class="text-muted">(Legajo: @_docenteActual?.Legajo)</small></h4>
        </div>
        <div class="card-body">

            <ul class="nav nav-tabs" id="docenteTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "calificaciones" ? "active" : "")" @onclick='() => SetActiveTab("calificaciones")' type="button">Gestión de Calificaciones</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "reportes" ? "active" : "")" @onclick='() => SetActiveTab("reportes")' type="button">Reporte de Rendimiento</button>
                </li>
            </ul>

            <div class="tab-content pt-3">
                @if (isLoading)
                {
                    <div class="text-center p-4"><div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div></div>
                }
                else
                {
                    @if (activeTab == "calificaciones")
                    {
                        <div class="row g-3">
                            <div class="col-lg-5">
                                <h5 class="mb-3">Mis Cursos Asignados</h5>
                                <div class="list-group">
                                    @foreach (var curso in _misCursosParaMostrar)
                                    {
                                        <button type="button" class="list-group-item list-group-item-action @(curso.IdCurso == _cursoSeleccionadoId ? "active" : "")" @onclick="() => SeleccionarCurso(curso.IdCurso)">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h6 class="mb-1">@curso.Materia</h6><small>Año: @curso.Año</small>
                                            </div>
                                            <p class="mb-1">Comisión: @curso.Comision</p><small>Cargo: @curso.Cargo</small>
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="col-lg-7">
                                <h5 class="mb-3">Alumnos Inscriptos</h5>
                                @if (_isLoadingAlumnos)
                                {
                                    <div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div></div>
                                }
                                else if (_alumnosDelCurso.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-sm table-hover">
                                            <thead><tr><th>Legajo</th><th>Nombre Completo</th><th>Condición</th><th>Nota</th></tr></thead>
                                            <tbody>
                                                @foreach (var alumno in _alumnosDelCurso)
                                                {
                                                    <tr>
                                                        <td>@alumno.LegajoAlumno</td><td>@alumno.NombreCompleto</td>
                                                        <td><input type="text" class="form-control form-control-sm" @bind="alumno.Condicion" /></td>
                                                        <td><input type="number" class="form-control form-control-sm" @bind="alumno.Nota" /></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <button class="btn btn-primary" @onclick="GuardarCambios" disabled="@_isSaving">
                                        @if(_isSaving) { <span class="spinner-border spinner-border-sm"></span> } else { <text>Guardar Cambios</text> }
                                    </button>
                                }
                                else { <p class="text-muted">Seleccione un curso para ver los alumnos o no hay alumnos inscriptos.</p> }
                            </div>
                        </div>
                    }

                    @if (activeTab == "reportes")
                    {
                        <div class="row align-items-end mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Seleccione un Curso para el Reporte:</label>
                                <InputSelect class="form-select" @bind-Value="_cursoReporteId">
                                    <option value="0">-- Seleccionar --</option>
                                    @foreach (var curso in _misCursosParaMostrar)
                                    {
                                        <option value="@curso.IdCurso">@curso.Materia - @curso.Comision (@curso.Año)</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-success w-100" @onclick="GenerarReporte" disabled="@(_cursoReporteId == 0)">
                                    <span class="bi bi-bar-chart-fill"></span> Generar Reporte
                                </button>
                            </div>
                        </div>

                        @if (_isLoadingReporte)
                        {
                            <div class="text-center p-4"><div class="spinner-border" role="status"></div></div>
                        }
                        else if (_reporteData != null && _reporteData.Any())
                        {
                             <div class="row mt-3">
                                <div class="col-lg-7">
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead class="table-dark"><tr><th>Legajo</th><th>Alumno</th><th>Condición</th><th>Nota</th></tr></thead>
                                            <tbody>
                                                @foreach (var item in _reporteData)
                                                {
                                                    <tr><td>@item.LegajoAlumno</td><td>@item.NombreCompleto</td><td><span class="badge bg-info text-dark">@item.Condicion</span></td><td><strong>@item.Nota</strong></td></tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="col-lg-5">
                                    <div class="card border-0 shadow-sm"><div class="card-body">
                                        <h5 class="card-title text-center mb-3">Distribución por Condición</h5>
                                            @if (_chartConfig != null && _chartConfig.Data.Datasets.Any())
                                            {
                                                <Chart Config="_chartConfig" @ref="_chart"></Chart>
                                            }
                                        <Chart Config="_chartConfig" @ref="_chart"></Chart>
                                    </div></div>
                                </div>
                            </div>
                        }
                        else if (_reporteData != null && !_reporteData.Any())
                        {
                            <div class="alert alert-info mt-3"><span class="bi bi-info-circle"></span> No se encontraron inscripciones para este curso.</div>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "calificaciones";
    private bool isLoading = true;
    private bool _isLoadingAlumnos = false;
    private bool _isSaving = false;
    private bool _isLoadingReporte = false;

    private UsuarioDTO _docenteActual;
    private List<CursoViewModel> _misCursosParaMostrar = new();
    private int _cursoSeleccionadoId;

    private List<AlumnoInscripcionViewModel> _alumnosDelCurso = new();
    private List<RendimientoCursoDto>? _reporteData;
    
    private int _cursoReporteId = 0;
    private PieConfig _chartConfig;
    private Chart _chart;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _docenteActual = new UsuarioDTO { Legajo = authState.User.Claims.FirstOrDefault(c => c.Type == "sub")?.Value, PersonaNombreCompleto = authState.User.Claims.FirstOrDefault(c => c.Type == "nombreCompleto")?.Value };
        
        InitializeChartConfig();
        await CargarMisCursosAsync();
        isLoading = false;
    }

    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
        _reporteData = null;
        _cursoReporteId = 0;
    }
    
    private async Task CargarMisCursosAsync() 
    {
        var todasLasAsignaciones = (await DocenteCursoClient.GetAllAsync()).Where(a => a.LegajoDocente == _docenteActual.Legajo).ToList();
        var todosLosCursos = (await CursoClient.GetAll()).ToList();
        var todasLasMaterias = (await MateriaClient.GetAll()).ToList();
        var todasLasComisiones = (await ComisionClient.GetAll()).ToList();

        _misCursosParaMostrar = (from asig in todasLasAsignaciones
                                join curso in todosLosCursos on asig.IdCurso equals curso.Id
                                join materia in todasLasMaterias on curso.IdMateria equals materia.Id
                                join comision in todasLasComisiones on curso.IdComision equals comision.Nro
                                select new CursoViewModel
                                {
                                    IdCurso = curso.Id,
                                    Materia = materia.Nombre,
                                    Comision = comision.Descripcion,
                                    Año = curso.AnioCalendario,
                                    Cargo = asig.Cargo.ToString()
                                }).ToList();
    }
    
    private async Task SeleccionarCurso(int cursoId) 
    {
        _cursoSeleccionadoId = cursoId;
        _isLoadingAlumnos = true;
        _alumnosDelCurso.Clear();
        StateHasChanged();

        var todasLasInscripciones = (await InscripcionClient.GetAll()).Where(i => i.IdCurso == cursoId).ToList();
        var todosLosUsuarios = (await UsuarioClient.GetAll()).ToList();
        _alumnosDelCurso = (from insc in todasLasInscripciones
                           join usuario in todosLosUsuarios on insc.LegajoAlumno equals usuario.Legajo
                           select new AlumnoInscripcionViewModel
                           {
                               LegajoAlumno = insc.LegajoAlumno,
                               NombreCompleto = usuario.PersonaNombreCompleto,
                               Condicion = insc.Condicion,
                               Nota = insc.Nota
                           }).ToList();
        
        _isLoadingAlumnos = false;
    }
    
    private async Task GuardarCambios() 
    {
        _isSaving = true;
        var tareas = _alumnosDelCurso.Select(alumno => 
            InscripcionClient.Update(new AlumnoInscripcionDTO
            {
                LegajoAlumno = alumno.LegajoAlumno,
                IdCurso = _cursoSeleccionadoId,
                Condicion = alumno.Condicion,
                Nota = alumno.Nota
            })
        ).ToList();

        await Task.WhenAll(tareas);
        _isSaving = false;
    }

    private void InitializeChartConfig()
    {
        _chartConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = "Distribución de Condiciones" },
                Legend = new Legend { Position = ChartJs.Blazor.Common.Enums.Position.Bottom } 
            }
        };
    }
    
    private async Task GenerarReporte()
    {
        if (_cursoReporteId == 0) return;

        _isLoadingReporte = true;
        _reporteData = null;
        _chartConfig = null; 
        await InvokeAsync(StateHasChanged); 

        _reporteData = (await ReportesClient.GetRendimientoCursoAsync(_cursoReporteId)).ToList();

        if (_reporteData.Any())
        {
            var chartData = _reporteData
                .GroupBy(r => r.Condicion)
                .Select(g => new { Condicion = g.Key, Cantidad = g.Count() })
                .ToList();

            _chartConfig = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle { Display = true, Text = "Distribución por Condición" },
                    Legend = new Legend { Position = Position.Bottom }
                }
            };

            var dataset = new PieDataset<int>(chartData.Select(d => d.Cantidad))
            {
                BackgroundColor = new[] { "#36A2EB", "#FF6384", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40" }
            };

            foreach (var label in chartData.Select(d => d.Condicion))
            {
                _chartConfig.Data.Labels.Add(label);
            }

            _chartConfig.Data.Datasets.Add(dataset);
        }

        _isLoadingReporte = false;
        await InvokeAsync(StateHasChanged);
    }

    public class CursoViewModel 
    { 
        public int IdCurso { get; set; } 
        public string Materia { get; set; } 
        public string Comision { get; set; } 
        public int Año { get; set; } 
        public string Cargo { get; set; } 
    }
    public class AlumnoInscripcionViewModel 
    { 
        public string LegajoAlumno { get; set; } 
        public string NombreCompleto { get; set; } 
        public string Condicion { get; set; } 
        public int Nota { get; set; } 
    }
}