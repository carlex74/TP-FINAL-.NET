@page "/reportes/rendimiento"
@attribute [Authorize(Roles = "Administrador")]

@inject IAPIUsuarioClients UsuarioClient
@inject IAPICursoClient CursoClient
@inject IAlumnoInscripcionClients InscripcionClient
@inject IAPIMateriaClient MateriaClient
@inject IAPIComisionClient ComisionClient

<PageTitle>Rendimiento por Curso</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Rendimiento por Curso</h1>
        <hr />

        @if (_isLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h4 class="mb-0">Análisis de Rendimiento</h4>
                </div>
                <div class="card-body">
                    <div class="row align-items-end mb-3">
                        <div class="col-md-6">
                            <label for="cursoSelect" class="form-label">Seleccione un Curso:</label>
                            <InputSelect id="cursoSelect" class="form-select" @bind-Value="_selectedCursoId">
                                <option value="0">-- Seleccionar --</option>
                                @foreach (var curso in _allCursos)
                                {
                                    <option value="@curso.Id">@curso.Descripcion</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-success w-100" @onclick="GenerarReporteRendimiento" disabled="@(_selectedCursoId == 0)">
                                <span class="bi bi-bar-chart-fill"></span> Generar Reporte
                            </button>
                        </div>
                    </div>

                    @if (_rendimientoData != null && _rendimientoData.Any())
                    {
                        <div class="row">
                            <div class="col-lg-7">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Legajo</th>
                                                <th>Alumno</th>
                                                <th>Condición</th>
                                                <th>Nota</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in _rendimientoData)
                                            {
                                                <tr>
                                                    <td>@item.Legajo</td>
                                                    <td>@item.Nombre</td>
                                                    <td><span class="badge bg-info">@item.Condicion</span></td>
                                                    <td><strong>@item.Nota</strong></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="col-lg-5">
                                @if (_pieChartConfig != null)
                                {
                                    <div class="card border-0 shadow-sm">
                                        <div class="card-body">
                                            <h5 class="card-title text-center mb-3">Distribución por Condición</h5>
                                            <div style="max-width: 400px; margin: 0 auto;">
                                                <Chart Config="_pieChartConfig"></Chart>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (_rendimientoData != null && !_rendimientoData.Any())
                    {
                        <div class="alert alert-info mt-3">
                            <span class="bi bi-info-circle"></span> No se encontraron inscripciones para este curso.
                        </div>
                    }
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <span class="bi bi-exclamation-triangle"></span> No tiene permisos para ver esta sección.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;

    // Datos cacheados
    private List<AlumnoInscripcionDTO> _allInscripciones = new();
    private List<MateriaDTO> _allMaterias = new();
    private List<ComisionDTO> _allComisiones = new();
    private List<UsuarioDTO> _allUsuarios = new();
    private List<CursoDTO> _allCursos = new();

    // Estado del reporte
    private int _selectedCursoId = 0;
    private List<RendimientoViewModel>? _rendimientoData;
    private PieConfig? _pieChartConfig;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var usuariosTask = UsuarioClient.GetAll();
            var cursosTask = CursoClient.GetAll();
            var inscripcionesTask = InscripcionClient.GetAll();
            var materiasTask = MateriaClient.GetAll();
            var comisionesTask = ComisionClient.GetAll();

            await Task.WhenAll(usuariosTask, cursosTask, inscripcionesTask, materiasTask, comisionesTask);

            _allUsuarios = (await usuariosTask).ToList();
            _allCursos = (await cursosTask).ToList();
            _allInscripciones = (await inscripcionesTask).ToList();
            _allMaterias = (await materiasTask).ToList();
            _allComisiones = (await comisionesTask).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos iniciales: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void GenerarReporteRendimiento()
    {
        _rendimientoData = null;

        if (_selectedCursoId == 0)
            return;

        var inscripcionesCurso = _allInscripciones
            .Where(i => i.IdCurso == _selectedCursoId)
            .ToList();

        _rendimientoData = (from insc in inscripcionesCurso
                            join usuario in _allUsuarios on insc.LegajoAlumno equals usuario.Legajo
                            select new RendimientoViewModel
                            {
                                Legajo = usuario.Legajo,
                                Nombre = usuario.PersonaNombreCompleto,
                                Condicion = insc.Condicion ?? "Sin definir",
                                Nota = insc.Nota
                            })
                            .OrderBy(r => r.Nombre)
                            .ToList();

        // Generar el gráfico
        GenerarGraficoRendimiento();
    }

    private void GenerarGraficoRendimiento()
    {
        if (_rendimientoData == null || !_rendimientoData.Any())
            return;

        var chartDataGroup = _rendimientoData
            .GroupBy(r => r.Condicion)
            .Select(g => new { Condicion = g.Key, Cantidad = g.Count() })
            .ToList();

        // Si el gráfico ya existe, solo actualizar los datos
        if (_pieChartConfig != null)
        {
            _pieChartConfig.Data.Labels.Clear();
            _pieChartConfig.Data.Datasets.Clear();
        }
        else
        {
            // Crear nuevo gráfico solo si no existe
            _pieChartConfig = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    MaintainAspectRatio = true
                }
            };
        }

        var pieDataset = new PieDataset<int>
        {
            BackgroundColor = new[]
            {
                "#36A2EB",
                "#FF6384",
                "#FFCE56",
                "#4BC0C0",
                "#9966FF",
                "#FF9F40"
            }
        };

        // Agregar los datos al dataset
        foreach (var item in chartDataGroup)
        {
            pieDataset.Add(item.Cantidad);
            _pieChartConfig.Data.Labels.Add(item.Condicion);
        }

        // Agregar el dataset al gráfico
        _pieChartConfig.Data.Datasets.Add(pieDataset);
    }

    class RendimientoViewModel
    {
        public string Legajo { get; set; } = string.Empty;
        public string? Nombre { get; set; }
        public string Condicion { get; set; } = string.Empty;
        public int Nota { get; set; }
    }
}