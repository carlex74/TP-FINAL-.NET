@page "/reportes/historial"
@attribute [Authorize(Roles = "Administrador")]

@inject IAPIUsuarioClients UsuarioClient
@inject IAPICursoClient CursoClient
@inject IAlumnoInscripcionClients InscripcionClient
@inject IAPIMateriaClient MateriaClient
@inject IAPIComisionClient ComisionClient

<PageTitle>Historial Académico</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Historial Académico del Alumno</h1>
        <hr />

        @if (_isLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Consultar Historial Académico</h4>
                </div>
                <div class="card-body">
                    <div class="row align-items-end mb-3">
                        <div class="col-md-6">
                            <label for="alumnoSelect" class="form-label">Seleccione un Alumno:</label>
                            <InputSelect id="alumnoSelect" class="form-select" @bind-Value="_selectedAlumnoLegajo">
                                <option value="">-- Seleccionar --</option>
                                @foreach (var alumno in _alumnos)
                                {
                                    <option value="@alumno.Legajo">@alumno.PersonaNombreCompleto</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-primary w-100" @onclick="GenerarReporteHistorial" disabled="@string.IsNullOrEmpty(_selectedAlumnoLegajo)">
                                <span class="bi bi-file-earmark-text"></span> Generar Reporte
                            </button>
                        </div>
                    </div>

                    @if (_historialData != null && _historialData.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Materia</th>
                                        <th>Comisión</th>
                                        <th>Año</th>
                                        <th>Condición</th>
                                        <th>Nota</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _historialData)
                                    {
                                        <tr>
                                            <td>@item.Materia</td>
                                            <td>@item.Comision</td>
                                            <td>@item.Anio</td>
                                            <td><span class="badge bg-info">@item.Condicion</span></td>
                                            <td><strong>@item.Nota</strong></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-3 p-3 bg-light rounded border">
                            <h5 class="mb-0"><span class="bi bi-calculator"></span> @_promedioMessage</h5>
                        </div>
                    }
                    else if (_historialData != null && !_historialData.Any())
                    {
                        <div class="alert alert-info mt-3">
                            <span class="bi bi-info-circle"></span> No se encontraron inscripciones para este alumno.
                        </div>
                    }
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <span class="bi bi-exclamation-triangle"></span> No tiene permisos para ver esta sección.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<UsuarioDTO> _alumnos = new();
    private List<AlumnoInscripcionDTO> _allInscripciones = new();
    private List<MateriaDTO> _allMaterias = new();
    private List<ComisionDTO> _allComisiones = new();
    private List<UsuarioDTO> _allUsuarios = new();
    private List<CursoDTO> _allCursos = new();
    private string _selectedAlumnoLegajo = "";
    private List<HistorialViewModel>? _historialData;
    private string _promedioMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var usuariosTask = UsuarioClient.GetAll();
            var cursosTask = CursoClient.GetAll();
            var inscripcionesTask = InscripcionClient.GetAll();
            var materiasTask = MateriaClient.GetAll();
            var comisionesTask = ComisionClient.GetAll();

            await Task.WhenAll(usuariosTask, cursosTask, inscripcionesTask, materiasTask, comisionesTask);

            _allUsuarios = (await usuariosTask).ToList();
            _allCursos = (await cursosTask).ToList();
            _allInscripciones = (await inscripcionesTask).ToList();
            _allMaterias = (await materiasTask).ToList();
            _allComisiones = (await comisionesTask).ToList();

            _alumnos = _allUsuarios.Where(u => u.Tipo == TipoUsuario.Alumno).OrderBy(u => u.PersonaNombreCompleto).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos iniciales: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void GenerarReporteHistorial()
    {
        _historialData = null;
        _promedioMessage = "";

        if (string.IsNullOrEmpty(_selectedAlumnoLegajo))
            return;

        var inscripcionesAlumno = _allInscripciones
            .Where(i => i.LegajoAlumno == _selectedAlumnoLegajo)
            .ToList();

        _historialData = (from insc in inscripcionesAlumno
                          join curso in _allCursos on insc.IdCurso equals curso.Id
                          join materia in _allMaterias on curso.IdMateria equals materia.Id
                          join comision in _allComisiones on curso.IdComision equals comision.Nro
                          select new HistorialViewModel
                          {
                              Materia = materia.Nombre,
                              Comision = comision.Descripcion,
                              Anio = curso.AnioCalendario,
                              Condicion = insc.Condicion ?? "Sin definir",
                              Nota = insc.Nota
                          })
                          .OrderBy(h => h.Anio)
                          .ThenBy(h => h.Materia)
                          .ToList();

        var materiasAprobadas = _historialData
            .Where(h => !string.IsNullOrEmpty(h.Condicion) &&
                        h.Condicion.Equals("Aprobado", StringComparison.OrdinalIgnoreCase) &&
                        h.Nota >= 4)
            .ToList();

        if (materiasAprobadas.Any())
        {
            double promedio = materiasAprobadas.Average(h => h.Nota);
            _promedioMessage = $"Promedio General (Aprobadas): {promedio:F2}";
        }
        else
        {
            _promedioMessage = "Promedio General: N/A (sin materias aprobadas)";
        }
    }

    class HistorialViewModel
    {
        public string Materia { get; set; } = string.Empty;
        public string Comision { get; set; } = string.Empty;
        public int Anio { get; set; }
        public string Condicion { get; set; } = string.Empty;
        public int Nota { get; set; }
    }
}