@inject IAPIUsuarioClients UsuarioClient
@inject IAlumnoInscripcionClients InscripcionClient
@inject IAPICursoClient CursoClient
@inject IAPIMateriaClient MateriaClient
@inject IAPIComisionClient ComisionClient

@if (alumnos == null)
{
    <p><em>Cargando alumnos...</em></p>
}
else
{
    <div class="row g-3 align-items-end">
        <div class="col-md-6">
            <label for="alumnoSelect" class="form-label">Seleccione un Alumno:</label>
            <InputSelect id="alumnoSelect" class="form-select" @bind-Value="selectedAlumnoLegajo">
                <option value="">-- Seleccione --</option>
                @foreach (var alumno in alumnos)
                {
                    <option value="@alumno.Legajo">@alumno.PersonaNombreCompleto</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6">
            <button class="btn btn-primary" @onclick="GenerarReporteHistorial" disabled="@(string.IsNullOrEmpty(selectedAlumnoLegajo) || isReportLoading)">
                @if (isReportLoading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                    <span> Generando...</span>
                }
                else
                {
                    <span>Generar Reporte</span>
                }
            </button>
        </div>
    </div>
}

@if (historialData != null)
{
    <hr class="my-4"/>
    @if (!historialData.Any())
    {
        <p class="text-muted mt-3">El alumno seleccionado no tiene inscripciones.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Materia</th>
                        <th>Comisión</th>
                        <th>Año</th>
                        <th>Condición</th>
                        <th>Nota</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in historialData)
                    {
                        <tr>
                            <td>@item.Materia</td>
                            <td>@item.Comision</td>
                            <td>@item.Anio</td>
                            <td>@item.Condicion</td>
                            <td>@item.Nota</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <p class="mt-3 fw-bold">@promedioTexto</p>
    }
}

@code {
    private bool isReportLoading = false;
    private List<UsuarioDTO> alumnos;
    private string selectedAlumnoLegajo;

    private List<HistorialViewModel> historialData;
    private string promedioTexto;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var usuarios = await UsuarioClient.GetAll();
            alumnos = usuarios.Where(u => u.Tipo == Domain.Entities.Usuario.TipoUsuario.Alumno)
                              .OrderBy(u => u.PersonaNombreCompleto).ToList();
        }
        catch { /* Manejar error */ }
    }

    private async Task GenerarReporteHistorial()
    {
        if (string.IsNullOrEmpty(selectedAlumnoLegajo)) return;
        isReportLoading = true;
        historialData = null;
        promedioTexto = "";

        try
        {
            var inscripciones = (await InscripcionClient.GetAll()).Where(i => i.LegajoAlumno == selectedAlumnoLegajo).ToList();
            var cursos = await CursoClient.GetAll();
            var materias = await MateriaClient.GetAll();
            var comisiones = await ComisionClient.GetAll();

            historialData = (from insc in inscripciones
                             join curso in cursos on insc.IdCurso equals curso.Id
                             join materia in materias on curso.IdMateria equals materia.Id
                             join comision in comisiones on curso.IdComision equals comision.Nro
                             select new HistorialViewModel { /* ... */ }).ToList();
            
            var materiasAprobadas = historialData.Where(r => r.Condicion.Trim().Equals("Aprobado", StringComparison.OrdinalIgnoreCase) && r.Nota >= 4).ToList();
            promedioTexto = materiasAprobadas.Any() 
                ? $"Promedio General (Aprobadas): {materiasAprobadas.Average(r => r.Nota):F2}" 
                : "Promedio General: N/A (sin materias aprobadas)";
        }
        catch { /* Manejar error */ }
        finally { isReportLoading = false; }
    }

    public class HistorialViewModel
    {
        public string Materia { get; set; }
        public string Comision { get; set; }
        public int Anio { get; set; }
        public string Condicion { get; set; }
        public int Nota { get; set; }
    }
}